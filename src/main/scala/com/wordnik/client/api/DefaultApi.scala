/**
 * Rest API to create/fetch accounts in Finkit system
 * A simple API to learn how to write OpenAPI Specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.wordnik.client.api

import com.wordnik.client.model.AccountDetails
import com.wordnik.client.model.Accounts

import java.io.File

import org.scalatra.{ TypedParamSupport, ScalatraServlet }
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{FileUploadSupport, MultipartConfig, SizeConstraintExceededException}

import scala.collection.JavaConverters._

class DefaultApi (implicit val swagger: Swagger) extends ScalatraServlet
    with FileUploadSupport
    with JacksonJsonSupport
    with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "DefaultApi"
  override protected val applicationName: Option[String] = Some("/localhost:8080/Default")

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val createAccountOperation = (apiOperation[Unit]("createAccount")
      summary "Creates an account"
      parameters(bodyParam[AccountDetails]("accountDetails").description("").optional)
  )

  post("/accounts",operation(createAccountOperation)) {
    
    
          val accountDetails = parsedBody.extract[AccountDetails]

    println("accountDetails: " + accountDetails)
  }

  

  val deleetAccountOperation = (apiOperation[Unit]("deleetAccount")
      summary "Account details delete"
      parameters(pathParam[Int]("accountNumber").description(""))
  )

  delete("/account-delete/:accountNumber",operation(deleetAccountOperation)) {
    
    
      val accountNumber = params.getOrElse("accountNumber", halt(400))
    
    println("accountNumber: " + accountNumber)
  }

  

  val getAccountDetailsOperation = (apiOperation[AccountDetails]("getAccountDetails")
      summary "Gets the account details for the given account number"
      parameters(pathParam[Int]("accountNumber").description(""))
  )

  get("/accounts/:accountNumber",operation(getAccountDetailsOperation)) {
    
    
      val accountNumber = params.getOrElse("accountNumber", halt(400))
    
    println("accountNumber: " + accountNumber)
  }

  

  val getAllAccountsOperation = (apiOperation[Accounts]("getAllAccounts")
      summary "Gets account details"
      parameters()
  )

  get("/accounts",operation(getAllAccountsOperation)) {
  }

  

  val updateAccountDetailsOperation = (apiOperation[Unit]("updateAccountDetails")
      summary "Account details update"
      parameters(pathParam[Int]("accountNumber").description(""))
  )

  put("/account-update/:accountNumber",operation(updateAccountDetailsOperation)) {
    
    
      val accountNumber = params.getOrElse("accountNumber", halt(400))
    
    println("accountNumber: " + accountNumber)
  }

}
